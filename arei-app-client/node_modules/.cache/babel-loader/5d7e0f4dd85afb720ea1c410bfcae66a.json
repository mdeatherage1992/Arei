{"ast":null,"code":"var url = require('url'),\n    passes = exports;\n\nvar redirectRegex = /^30(1|2|7|8)$/;\n/*!\n * Array of passes.\n *\n * A `pass` is just a function that is executed on `req, res, options`\n * so that you can easily add new checks while still keeping the base\n * flexible.\n */\n\n[// <--\n\n/**\n * If is a HTTP 1.0 request, remove chunk headers\n *\n * @param {ClientRequest} Req Request object\n * @param {IncomingMessage} Res Response object\n * @param {proxyResponse} Res Response object from the proxy request\n *\n * @api private\n */\nfunction removeChunked(req, res, proxyRes) {\n  if (req.httpVersion === '1.0') {\n    delete proxyRes.headers['transfer-encoding'];\n  }\n},\n/**\n * If is a HTTP 1.0 request, set the correct connection header\n * or if connection header not present, then use `keep-alive`\n *\n * @param {ClientRequest} Req Request object\n * @param {IncomingMessage} Res Response object\n * @param {proxyResponse} Res Response object from the proxy request\n *\n * @api private\n */\nfunction setConnection(req, res, proxyRes) {\n  if (req.httpVersion === '1.0') {\n    proxyRes.headers.connection = req.headers.connection || 'close';\n  } else if (!proxyRes.headers.connection) {\n    proxyRes.headers.connection = req.headers.connection || 'keep-alive';\n  }\n}, function setRedirectHostRewrite(req, res, proxyRes, options) {\n  if ((options.hostRewrite || options.autoRewrite || options.protocolRewrite) && proxyRes.headers['location'] && redirectRegex.test(proxyRes.statusCode)) {\n    var target = url.parse(options.target);\n    var u = url.parse(proxyRes.headers['location']); // make sure the redirected host matches the target host before rewriting\n\n    if (target.host != u.host) {\n      return;\n    }\n\n    if (options.hostRewrite) {\n      u.host = options.hostRewrite;\n    } else if (options.autoRewrite) {\n      u.host = req.headers['host'];\n    }\n\n    if (options.protocolRewrite) {\n      u.protocol = options.protocolRewrite;\n    }\n\n    proxyRes.headers['location'] = u.format();\n  }\n},\n/**\n * Copy headers from proxyResponse to response\n * set each header in response object.\n *\n * @param {ClientRequest} Req Request object\n * @param {IncomingMessage} Res Response object\n * @param {proxyResponse} Res Response object from the proxy request\n *\n * @api private\n */\nfunction writeHeaders(req, res, proxyRes) {\n  Object.keys(proxyRes.headers).forEach(function (key) {\n    res.setHeader(key, proxyRes.headers[key]);\n  });\n},\n/**\n * Set the statusCode from the proxyResponse\n *\n * @param {ClientRequest} Req Request object\n * @param {IncomingMessage} Res Response object\n * @param {proxyResponse} Res Response object from the proxy request\n *\n * @api private\n */\nfunction writeStatusCode(req, res, proxyRes) {\n  res.writeHead(proxyRes.statusCode);\n}] // <--\n.forEach(function (func) {\n  passes[func.name] = func;\n});","map":null,"metadata":{},"sourceType":"script"}