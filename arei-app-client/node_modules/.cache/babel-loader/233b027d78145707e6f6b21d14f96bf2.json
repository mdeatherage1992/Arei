{"ast":null,"code":"'use strict';\n\nvar parseUrl = require('url').parse;\n\nvar DEFAULT_PORTS = {\n  'ftp:': 21,\n  'gopher:': 70,\n  'http:': 80,\n  'https:': 443,\n  'ws:': 80,\n  'wss:': 443\n};\n\nvar stringEndsWith = String.prototype.endsWith || function (s) {\n  return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;\n};\n/**\n * @param {string} url - The URL\n * @return {string} The URL of the proxy that should handle the request to the\n *  given URL. If no proxy is set, this will be an empty string.\n */\n\n\nfunction getProxyForUrl(url) {\n  var parsedUrl = parseUrl(url);\n\n  if (!parsedUrl.host || !shouldProxy(parsedUrl)) {\n    return ''; // Don't proxy invalid URLs or URLs that match NO_PROXY.\n  }\n\n  var proto = url.split(':', 1)[0];\n  return getEnv(proto + '_proxy') || getEnv('all_proxy');\n}\n/**\n * Determines whether a given URL should be proxied.\n *\n * @param {object} parsedUrl - The result of url.parse\n * @returns {boolean} Whether the given URL should be proxied.\n * @private\n */\n\n\nfunction shouldProxy(parsedUrl) {\n  var NO_PROXY = getEnv('no_proxy').toLowerCase();\n\n  if (!NO_PROXY) {\n    return true; // Always proxy if NO_PROXY is not set.\n  }\n\n  if (NO_PROXY === '*') {\n    return false; // Never proxy if wildcard is set.\n  }\n\n  var port = parseInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || 0; // Stripping ports in this way instead of using parsedUrl.hostname to make\n  // sure that the brackets around IPv6 addresses are kept.\n\n  var hostname = parsedUrl.host.replace(/:\\d*$/, '');\n  return NO_PROXY.split(/[,\\s]/).every(function (proxy) {\n    if (!proxy) {\n      return true; // Skip zero-length hosts.\n    }\n\n    var parsedProxy = proxy.match(/^(.+):(\\d+)$/);\n    var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;\n    var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;\n\n    if (parsedProxyPort && parsedProxyPort !== port) {\n      return true; // Skip if ports don't match.\n    }\n\n    if (!/^[.*]/.test(parsedProxyHostname)) {\n      // No wildcards, so stop proxying if there is an exact match.\n      return hostname !== parsedProxyHostname;\n    }\n\n    if (parsedProxyHostname.charAt(0) === '*') {\n      // Remove leading wildcard.\n      parsedProxyHostname = parsedProxyHostname.slice(1);\n    } // Stop proxying if the hostname ends with the no_proxy host.\n\n\n    return !stringEndsWith.call(hostname, parsedProxyHostname);\n  });\n}\n/**\n * Get the value for an environment variable.\n *\n * @param {string} key - The name of the environment variable.\n * @return {string} The value of the environment variable.\n * @private\n */\n\n\nfunction getEnv(key) {\n  return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || '';\n}\n\nexports.getProxyForUrl = getProxyForUrl;","map":null,"metadata":{},"sourceType":"script"}